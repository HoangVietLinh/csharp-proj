// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OffleaseOnly
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Cars.
    /// </summary>
    public static partial class CarsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vin'>
            /// </param>
            public static CarData GetByVin(this ICars operations, string vin)
            {
                return Task.Factory.StartNew(s => ((ICars)s).GetByVinAsync(vin), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vin'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CarData> GetByVinAsync(this ICars operations, string vin, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByVinWithHttpMessagesAsync(vin, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            public static IList<CarData> GetNew(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10)
            {
                return Task.Factory.StartNew(s => ((ICars)s).GetNewAsync(query, skip, take), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CarData>> GetNewAsync(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewWithHttpMessagesAsync(query, skip, take, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            public static IList<CarData> GetOld(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10)
            {
                return Task.Factory.StartNew(s => ((ICars)s).GetOldAsync(query, skip, take), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CarData>> GetOldAsync(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOldWithHttpMessagesAsync(query, skip, take, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            public static IList<CarData> GetHot(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10)
            {
                return Task.Factory.StartNew(s => ((ICars)s).GetHotAsync(query, skip, take), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CarData>> GetHotAsync(this ICars operations, string query = "car.year>0", int? skip = 0, int? take = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHotWithHttpMessagesAsync(query, skip, take, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            public static IList<Car> Get(this ICars operations, string query, int? skip = 0, int? take = 10)
            {
                return Task.Factory.StartNew(s => ((ICars)s).GetAsync(query, skip, take), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Car>> GetAsync(this ICars operations, string query, int? skip = 0, int? take = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(query, skip, take, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
